// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollows = `-- name: CreateFeedFollows :one
WITH inserted_feed_follows AS (
    INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
    VALUES (
        $1::UUID,
        $2::TIMESTAMP,
        $3::TIMESTAMP,
        $4::UUID,
        $5::UUID
    )
    RETURNING id, created_at, updated_at, user_id, feed_id
) SELECT inserted_feed_follows.id,
    inserted_feed_follows.created_at,
    inserted_feed_follows.updated_at,
    inserted_feed_follows.user_id,
    inserted_feed_follows.feed_id,
users.name AS user_name,
feeds.name AS feed_name
FROM inserted_feed_follows
INNER JOIN users ON inserted_feed_follows.user_id = users.id
INNER JOIN feeds ON inserted_feed_follows.feed_id = feeds.id
`

type CreateFeedFollowsParams struct {
	Column1 uuid.UUID
	Column2 time.Time
	Column3 time.Time
	Column4 uuid.UUID
	Column5 uuid.UUID
}

type CreateFeedFollowsRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollows(ctx context.Context, arg CreateFeedFollowsParams) (CreateFeedFollowsRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollows,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
	)
	var i CreateFeedFollowsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollowsByUserAndURL = `-- name: DeleteFeedFollowsByUserAndURL :one
DELETE FROM feed_follows
WHERE user_id = $1
  AND feed_id = (SELECT id FROM feeds WHERE url = $2)
RETURNING feed_id
`

type DeleteFeedFollowsByUserAndURLParams struct {
	Column1 uuid.NullUUID
	Column2 sql.NullString
}

func (q *Queries) DeleteFeedFollowsByUserAndURL(ctx context.Context, arg DeleteFeedFollowsByUserAndURLParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteFeedFollowsByUserAndURL, arg.Column1, arg.Column2)
	var feed_id uuid.UUID
	err := row.Scan(&feed_id)
	return feed_id, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT
    feed_follows.id,
    feed_follows.created_at,
    feed_follows.updated_at,
    feed_follows.user_id,
    feed_follows.feed_id,
    users.name AS user_name,
    feeds.name AS feed_name
FROM feed_follows
INNER JOIN users ON feed_follows.user_id = users.id
INNER JOIN feeds ON feed_follows.feed_id = feeds.id
WHERE feed_follows.user_id = $1::uuid
`

type GetFeedFollowsForUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

// GetFeedFollowsForUser: (user_id uuid.UUID) --
func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.NullUUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.UserName,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
